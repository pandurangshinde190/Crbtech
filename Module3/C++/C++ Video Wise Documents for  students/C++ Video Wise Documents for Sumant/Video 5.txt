The GS of writting a code/program in c++

#include<iostream>
using namespace std;

int main( void )
{
  --------
  --------
  --------
  return 0;
}

Let's get hands on with I/O operation in C++

In C for o/p operation "printf"
In C for i/p operation "scanf"

In C++ for o/p operation "cout"
In C++ for i/p operation "cin"

Let's understand the way to use it. 
Let's understand the advantages of using "cout" and "cin" over "printf" and "scanf"


The general format of using cout is -

cout << "format-string" ;
cout << expression ;

The general format of using cin is -

cin >> name-of-the-L-Value;

Benifit of using cout in c++ in comparision with using printf in c
Here no format specifier is required

Benifit of using cin in c++ in comparision with using scanf in c
Here no format specifier is required AND 
Here no need to specifiy the address of the variable/L-Value/Alingment


Note :- "cout" and "cin" are not the functions.
"cout" is an object of class "ostream"
"cin" is an object of class "istream"

Variables in C++
-----------------

1. Unlike 'C' here in 'C++' it's not mandatory to define the variable at the start of a block.
We are free to define it anywhere we wish. But the defination should be there before using it. 

2. We can create/define a variable in the place of "expression-1" i.e. "initialization" in for
loop. Such a variable is available only until the execution of loop.

for (int i = 1; i <= 10; ++i)
{
	cout << "\n" << i;
}
cout << "\nAccessing \"i\" outside the loop : " << i;


Global Variables 
------------------

Same Rule :- Priority is given to local variables first and then the global variables w.r.t accessing
of it.


When we define a local variable with the same name like a global one. 
Then because of this the global variable will go out of the scope. 
Because priority is given to the local variables.
Q/A) Is there any chance to access the "hidden-global-variable" ?

Ans : - Yes it is possible with the help of scope-resolution operator (::)

#include<iostream>
using namespace std;

int a = 10; //It's a global variable 

int main(void)
{
	int a = 20;

	cout << "\nValue of a is : " << a;

	cout << "\nValue of global a is : " << ::a; //::a --> refer to the 'a' which is defined 
	                                            //globally

	return 0;
}

Global variables in c/c++ are created before the execution of main.

So, if we have a global variable initialized with the return value of some function. Then, in such a 
case just for the creation and further initialization of the global variable you can observe the 
function getting called and executed before main.

In 'C' we can't have a function call placed globally. So, the try-out is not going to work in case of c.
In C++ we can have the function call placed globally only when it is returning something i.e. it's 
return type should not be void and it's mandatory to catch the return-value in this case.

#include<iostream>
using namespace std;

int foo(void)
{
	cout << "\nI am in foo ";
	return 9;
}

void bar(void)
{
	cout << "\nI am in bar ";
}

//int g = foo() ;
//bar(); //Error

//foo(); //CTE in C++ as well. 
         //The function should return something and it's mandatory to catch it.

int main(void)
{
	cout << "\nI am in main ";

	return 0;
}


Typecasting
------------

Already covered in 'C'

C++ supports 'C' style typecasting. 
But, along with this C++ also provides with the special casting operators for performing the
typecasting.

1. static_cast
2. dynamic_cast
3. reinterpret_cast

So, for simple C style typecasting between the "Primitive Data Types" of the expression
we should go for the operator "static_cast"

The syntax of using this operator is - 

static_cast<Specify the DT into which you want the coversion to happen>
(Specify that expression whoe's DT you want to convert temporarily)

#include<iostream>
using namespace std;

int main(void)
{
	int m1, m2, m3, m4, m5;
	
	float average;

	cout << "\nEnter the marks obtained in five subjects : ";
	cin >> m1 >> m2 >> m3 >> m4 >> m5;

	/*
	cin >> m1;
	cin >> m2;
	cin >> m3;
	cin >> m4;
	cin >> m5;
	*/
	
	int sum;
	sum = m1 + m2 + m3 + m4 + m5;

	//average = (float)sum / 5;

	average = static_cast<float>(sum)  / 5;

	cout << "\n\nAverage of marks is : " << average;


	return 0;
}

/*
static_cast
dynamic_cast
reinterpret_cast
*/


keyword "const" in C++ w.r.t defining of "symbolic constants" 
-------------------------------------------------------------

Understand the difference between "variable" and "constant"

It's not wise to define a variable for holding the value which is "universal constant"
Eg:- 
float pi = 3.14f ; //Poor programming practice
pi = 1.1f;  //This is allowed 
cout << "\n\n" << pi;
Any attempt done to modify it won't give you any compile time error. This could lead further into
some "logical error"

using keyword "const" in c++ we are able to define / represent "symbolic constants"

Ex. of defining constant in c++

const float PI = 3.14f;
float const PI = 3.14f;


PI is a "constant variable" of type "float"  [ Horrible. Dont read it like this]
Read it as -  PI is a "constant" of type "float" which is initialized by value "3.14f"

Any attempt done to modify the value of constant will give you a compile time error.
It is suggested to define constants in Capital Case

constant in c++ require compulsory initialization. 
We can't simply define it and keep it uninitialized. This is a compile time error.

Hint :- In C for symbolic constants we have the concept of "MACRO" (Simple MACRO)
        In C++ for symbolic constants we have the keyword "const"


DMA in C++ / operator "new" and operator "delete"
---------------------------------------------------


Let's try 

Allocate memory just enough to hold a single integer value using "malloc" function in C.

int *ptr;
ptr = (int *) malloc( sizeof(int) ) ;

Observation :- In case of malloc
1. The required size has to be explicitely provided to malloc as the argument
2. As malloc returns the base address as of type "void*" we do require "typecasting"


"new" :- 

It's an operator in C++.
It operates/works at runtime i.e dynamically i.e. during program execution.
It does the job of allocating the memory.
The memory allocated by "new" is always continous in nature, it's always alocated on heap and it's 
always alocated during the program execution.
After the allocation is done then "new" provides us with the base-address of the allocated memory.
The memory allocated by us explicitely using "new" has to be released back to the environment by us 
explicitely by using "delete"

a). new DataType ; 
It will allocate memory "on heap at run-time which is continous in nature" just enough to hold
a value belonging to the specified data type. 

b) new DataType(value);
It will allocate memory "on heap at run-time which is continous in nature" just enough to hold
a value belonging to the specified data type. Further the reserved memory would be initialized
by the value passed
 
c). new DataType[size];
It will create an array of the required size and the specified type.
eg:- new int[5];
It will create an "array of 5 integers"

Note :- If [] is used in allocation. Then, we should compulsorily use it in deallocation as well.
Else we will face the problem of memory leakage.

eg:- 

int *arr;
arr = new int[5] ; //an array is created with name "arr", size 5 and data type int
-------
-------
-------
delete arr; //This will deallocate only the memory reserved for the very first array element
            //As a result the problem of "memory leakage"

delete []arr; //This will deallocate the complete allocation



"delete" :-
---------

"delete" is also the operator in c++
It's used for releasing the memory back to the environment.
The memory allocated by us explicitely using "new" has to be released back to the environment by us 
explicitely by using "delete". If this is not done then w'll face a problem "memory leakage"
If [] is used in allocation. Then, we should compulsorily use it in deallocation as well.
Else we will face the problem of memory leakage.

The way to use it is - 

delete base-address ; [ base-address of allocation which is done by u explicitely using "new" ]

delete pointer-name ;




"inline function"
------------------

With "functions" we have one limitation and that is - "Function Call Overheads".
In 'C' to resolve it we have the concept of "Function-Like-Macro" / "Macro-with-parameter"

Just the function defination should be preceded with a keyword "inline".
Because of this the normal function call procedure i.e. the JUMP PROCESS is suspended. i.e. 
we don't have the "function-call-overhead".
At the place of function-call the code is simply expanded.
"inline" is just a request and not a order. If the compiler dosn't find the candidate sutibale for 
inlining then the request is discarded and the function will be treated as a "ordinary function".
Normally functions at max 6 lines long, without switch, loop, recursion, any complex task are 
best suited for inlining

In C for   F.C.O --------> macro with parameter / function like macro
In C++ for F.C.O --------> inline - function

inline function is handled by compiler and not by the linker. So, it's mandatory to 
provide the complete defination of the inline function to the compiler before using it.

Reference in c++
-----------------

Note :- The terminology "referance" is totally/completely different w.r.t the programing language
C++ and Java

By using this concept ( reference in c++) we are able to provide some addional name/lable to 
an existing L-Value / Variable / Object . 

eg:- 

int a = 10;

Here for the alignment from 1024-1028 (assumption as per the diagram drawn) we have a lable/name to it
and that is "a".
Using this concpet along with "a" we can have some more additional names for the existing L-Value i.e. 
"a".


"Anil"  / "dada" / "papu" / "tatya" / "bhau" ....................... "Anya"

The general syntax of creating a referance in c++ is as below - 

DataType &referance-Name  =  referantName ;

eg:- 

int a = 10;

int &b = a;  //Read it as "b is a referance to a"
             //OR          "b is a referance of type int and is refering to a"

The meaning of it is - "a" is having mone more additional name and that is "b" (alis OR URPH)

1. Referance in c++ is just a way of providing additional names to some existing 
L-Value/variable/object

2. The GS of creating a referance in C++ is as below - 
DataType &referance-Name  =  referantName ;

3. '&' is not the operator over here. It's just a symbol to represent that the further name is 
of a referance

4. = is compulsory because referance requires compulsory initialization. 

5. referant is nothing but name of an existing L-Value/variable/object

6. no seperate memory is allocated for refreance rather it shares the memory of the referant 


#include<iostream>
using namespace std;

//DataType &referance-Name  =  referantName ;

int main(void)
{
	int a = 10;
	int &b = a; 

	cout << "\nValue of a is : " << a;
	cout << "\nValue of b is : " << b;

	cout << "\n\n";

	cout << "\nAddress of a is : " << &a;
	cout << "\nAddress of b is : " << &b;

	b = 77;
	cout << "\n\n";

	cout << "\nValue of a is : " << a;
	cout << "\nValue of b is : " << b;

	a = 99;
	cout << "\n\n";

	cout << "\nValue of a is : " << a;
	cout << "\nValue of b is : " << b;

	return 0;
}


Q/A). What is the need of referance ?
      Why should I have an additional name for some existing variable-name/L-Value ?        

Pass By Value     (In C and In C++)
Pass By Address   (In C and In C++)
Pass By Referance (In C++. We don't have it in C) 
     

Revision of C i.e. pass by address in overcoming the limitation of return statement

w.r.t the code 
We saw and we know how the limitation of return statement is overcomed by using the concept of 
"pass by address".

Observation :- For holding the value of actual parameter we require to specify the formal parameters.
Some memory we require to reserve for the creation of formal parameters


When we go for "pass-by-referance" the benifit which we get is -
We require no memory for the creation of the formal argument.
Formal Argument simply share the same memory of the referant.


/*
#include<iostream>
using namespace std;

void calculateAreaPerimeter(int radius);

int main(void)
{
	int radius;

	cout << "\nEnter the value of radius : ";
	cin >> radius;

	calculateAreaPerimeter(radius);

	return 0;
}

void calculateAreaPerimeter(int radius)
{
	float a;
	float p;

	a = 3.14f * radius * radius;
	p = 2 * 3.14f * radius;

	//cout << "\nArea is : " << a;
	//cout << "\nPerimeter is : " << p;

	//Q/A :- I want to display the value of "area" and "perimeter" in "main"
	//This is not possible using "return statement"
}
*/

/*
#include<iostream>
using namespace std;

void calculateAreaPerimeter(int radius, float *a, float *p);

int main(void)
{
	int radius;
	float area;
	float perimeter;

	cout << "\nEnter the value of radius : ";
	cin >> radius;

	calculateAreaPerimeter(radius, &area, &perimeter);

	cout << "\n\n\nArea is : " << area;
	cout << "\nPerimeter is : " << perimeter;

	return 0;
}

void calculateAreaPerimeter(int radius, float *a, float *p)
{
	(*a) = 3.14f * radius * radius;
	(*p) = 2 * 3.14f * radius;
}
*/


#include<iostream>
using namespace std;

void calculateAreaPerimeter(int &x, float &y, float &z);

int main(void)
{
	int radius;
	float area;
	float perimeter;

	/*
	cout << "\nAddress of radius is : " << &radius;
	cout << "\nAddress of area is : " << &area;
	cout << "\nAddress of perimeter is : " << &perimeter;
	calculateAreaPerimeter(radius, area, perimeter);
	*/

	
	cout << "\nEnter the value of radius : ";
	cin >> radius;

	calculateAreaPerimeter(radius , area , perimeter);

	cout << "\n\n\nArea is : " << area;
	cout << "\nPerimeter is : " << perimeter;


	return 0;
}

/*
void calculateAreaPerimeter(int &x=radius, float &y=area, float &z=perimeter)
'x' is refering to 'radius'
'y' is refering to 'area'
'z' is refering to 'perimeter'
*/

void calculateAreaPerimeter(int &x, float &y, float &z)
{
	/*
	cout << "\n\n\nAddress of x is : " << &x;
	cout << "\nAddress of y is : " << &y;
	cout << "\nAddress of z is : " << &z;
	*/

	y = 3.14f * x * x;
	z = 2 * 3.14f * x;

}

Function / Method Overloading
------------------------------

In C we are not allowed to define mutiple functions with same.
i.e. In C name of each and every function should be unique. 

#include<stdio.h>

void add(int a, int b)
{
	//addition of 2 integers i.e. a and b 
}

void add(float x, float y)
{
	//addition of 2 floats i.e. x and y 
}

int main(void)
{
	return 0;
}

The above code has to give a compile-time-error in case of C Programing.

C++ allows defining mutiple functions with the same name. [Provided u follow the protocol]
And this is what we term it as -  "Function Overloading".
So, we can have a common-name/unique-name for mutiple functions with the name representing some 
similar task being performed  (eg:- add OR addition )


Let's go back and revise signature of a function 
-------------------------------------------------

return_type function_name (argument - list ) ;

For function overloading it's mandatory to have a difference in the signature of the method. 
(Off-corse the name of the method should be same )



#include<iostream>
using namespace std;

void addition(int a, int b)
{
	int sum;
	sum = a + b;
	cout << "\nAddition of two integers is : " << sum;
}

void addition(float x, float y)
{
	float sum;
	sum = x+y;
	cout << "\nAddition of two floats is : " << sum;
}

int main(void)
{

	addition(10, 20);  //addition(int, int)

	addition(1.1f, 2.2f); //addition(float, float)

	return 0;
}


default arguments 
------------------

"default arguments" compulsory needs to be specified in the function declaration.

It has to given from the trailing end. (from RHS to LHS)

In case of function call if the arguments are missing then the one which you have set as the
default argument will be considered. If you are passing the argument/t's explicitely then the 
priority is given for your passed arguments.


#include<iostream>
using namespace std;

void add(int a, int b, int c=5, int d=2, int e=1);

int main(void)
{
	//CTE :- Too few arguments. First 2 arguments are compulsory
	/*
	//add(); 

	//add(10);
	*/

	add(10, 20);

	add(10, 20, 30);

	add(10, 20, 30, 40);

	add(10, 20, 30, 40, 50);

	return 0;
}

void add(int a, int b, int c, int d, int e)
{
	cout << "\n\nAddition is " << a+b+c+d+e;

	//10 20  5  2  1   ---> 38

	//10, 20, 30  2  1  --> 63

	//10, 20, 30, 40 1  -->  101

	//10, 20, 30, 40, 50  ---> 150
}

